{"version":3,"sources":["services/SearchUser.ts","services/index.ts","App.tsx","hooks/useDebounce.ts","index.tsx"],"names":["gql","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","process","REACT_APP_TOKEN_GITHUB","Authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","useState","search","setSearch","query","setQuery","useQuery","SEARCH_USER","variables","loading","error","data","debouncedSearch","value","delay","debounce","setDebounce","useEffect","handler","setTimeout","clearTimeout","useDebounce","StrictMode","onChange","event","target","message","nodes","map","key","id","name","dangerouslySetInnerHTML","__html","bioHTML","ReactDOM","render","document","getElementById"],"mappings":"4iBAEeA,oBAAf,KCCMC,EAAWC,yBAAe,CAC9BC,IAAK,mCAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAC1BC,EAAQC,qLAAYC,uBAC1B,MAAO,CACLH,QAAQ,2BACHA,GADE,IAELI,cAAc,UAAD,OAAYH,SAUhBI,EALA,IAAIC,eAAa,CAC9BC,KAAMV,EAASW,OAAOd,GACtBe,MAAO,IAAIC,kB,QCoBEC,MA5Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEaF,mBAAS,IAFtB,mBAENG,EAFM,KAECC,EAFD,OAGkBC,mBAASC,EAAa,CAAEC,UAAW,CAACJ,WAA5DK,EAHM,EAGNA,QAASC,EAHH,EAGGA,MAAOC,EAHV,EAGUA,KAEjBC,ECdO,SAAqBC,EAAeC,GAAgB,IAAD,EAChCb,mBAASY,GADuB,mBACzDE,EADyD,KAC/CC,EAD+C,KAahE,OAVAC,qBAAU,WACR,IAAMC,EAAUC,YAAW,WACzBH,EAAYH,KACXC,GAEH,OAAO,WACLM,aAAaF,MAEd,CAACL,EAAOC,IAEJC,EDCiBM,CAAYnB,EAAQ,KAQ5C,OANAe,qBAAU,WACLL,GACDP,EAASO,KAEV,CAACA,IAGF,kBAAC,IAAMU,WAAP,KACE,6BACE,2BAAOT,MAAOX,EAAQqB,SAAU,SAACC,GAAD,OAAWrB,EAAUqB,EAAMC,OAAOZ,UACjEJ,GAAW,2CACXC,GAAS,uCAAcA,EAAMgB,SAC7Bf,GAAQA,EAAKT,OAAOyB,MAAMC,KAAK,SAACjB,GAAD,OAAgB,yBAAKkB,IAAKlB,EAAKmB,IAC7D,2BAAInB,EAAKoB,MACT,uBAAGC,wBAAyB,CAACC,OAAQtB,EAAKuB,kBE1BpDC,IAASC,OACP,kBAAC,IAAMd,WAAP,KACE,kBAAC,iBAAD,CAAgB5B,OAAQA,GACtB,kBAAC,EAAD,QAGJ2C,SAASC,eAAe,W","file":"static/js/main.7236b03c.chunk.js","sourcesContent":["import { gql } from '@apollo/client'\n\nexport default gql`\n    query users($query: String!) {\n        search(query: $query, type: USER, first: 15) {\n        userCount\n        nodes {\n            ... on User {\n            id\n            name\n            bioHTML\n            }\n        }\n        }\n    }\n`","import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\nconst httpLink = createHttpLink({\n  uri: 'https://api.github.com/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = process.env.REACT_APP_TOKEN_GITHUB;\n  return {\n    headers: {\n      ...headers,\n      Authorization: `Bearer ${token}`,\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nexport default client;\n\nexport { default as SEARCH_USER } from './SearchUser';\n","import React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/client'\nimport { SEARCH_USER } from './services';\nimport useDebounce from 'hooks/useDebounce';\n\ninterface IUser {\n  id: number\n  name: string \n  bioHTML: string\n}\n\nfunction App() {\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('')\n  const {loading, error, data} = useQuery(SEARCH_USER, { variables: {query} })\n\n  const debouncedSearch = useDebounce(search, 500)\n\n  useEffect(() => {\n    if(debouncedSearch) {\n      setQuery(debouncedSearch)\n    }\n  }, [debouncedSearch])\n  \n  return (\n    <React.StrictMode>\n      <div>\n        <input value={search} onChange={(event) => setSearch(event.target.value)} />\n        {loading && <div>Loading...</div>}\n        {error && <div>Error! { error.message }</div>}\n        {data && data.search.nodes.map( (data:IUser) => <div key={data.id}>\n          <p>{data.name}</p>\n          <p dangerouslySetInnerHTML={{__html: data.bioHTML}} ></p>\n        </div>)}\n      </div>\n    </React.StrictMode>\n  );\n}\n\nexport default App;\n","import { useState, useEffect} from 'react'\n\nexport default function useDebounce(value: string, delay: number) {\n  const [debounce, setDebounce] = useState(value)\n\n  useEffect(() => {\n    const handler = setTimeout(() => {\n      setDebounce(value)\n    }, delay)\n\n    return () => {\n      clearTimeout(handler)\n    }\n  }, [value, delay])\n\n  return debounce\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client'\nimport client from './services';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}